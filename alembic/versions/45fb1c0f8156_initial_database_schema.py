"""Initial database schema

Revision ID: 45fb1c0f8156
Revises:
Create Date: 2025-07-29 14:44:41.804460

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from datetime import datetime
import uuid

# revision identifiers, used by Alembic.
revision: str = "45fb1c0f8156"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "currency",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=30), nullable=False),
        sa.Column("symbol", sqlmodel.sql.sqltypes.AutoString(length=3), nullable=False),
        sa.Column("code", sqlmodel.sql.sqltypes.AutoString(length=3), nullable=False),
        sa.Column("rate", sa.Float(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "household",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column(
            "country", sqlmodel.sql.sqltypes.AutoString(length=90), nullable=False
        ),
        sa.Column("city", sqlmodel.sql.sqltypes.AutoString(length=189), nullable=False),
        sa.Column(
            "address", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "zip_code", sqlmodel.sql.sqltypes.AutoString(length=18), nullable=False
        ),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user",
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "first_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "last_name", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column(
            "password", sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False
        ),
        sa.Column("age", sa.Integer(), nullable=False),
        sa.Column("role", sa.Enum("ADMIN", "USER", name="userrole"), nullable=False),
        sa.Column("household_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["household_id"],
            ["household.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_user_email"), "user", ["email"], unique=True)
    op.create_table(
        "category",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "category_type",
            sa.Enum("INCOME", "EXPENSE", "TRANSFER", name="transactioncategory"),
            nullable=False,
        ),
        sa.Column("household_id", sa.Uuid(), nullable=True),
        sa.Column("parent_id", sa.Uuid(), nullable=True),
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(["household_id"], ["household.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["parent_id"], ["category.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "budget_goal",
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("amount", sa.Float(), nullable=False),
        sa.Column(
            "period",
            sa.Enum("WEEKLY", "MONTHLY", "YEARLY", name="budgetperiod"),
            nullable=False,
        ),
        sa.Column("start_date", sa.DateTime(), nullable=False),
        sa.Column("end_date", sa.DateTime(), nullable=True),
        sa.Column("household_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.Column("category_id", sa.Uuid(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(["category_id"], ["category.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["household_id"], ["household.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transaction",
        sa.Column("amount", sa.Float(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column(
            "transaction_type",
            sa.Enum("FIXED", "VARIABLE", name="transactiontype"),
            nullable=False,
        ),
        sa.Column(
            "transaction_category",
            sa.Enum("INCOME", "EXPENSE", "TRANSFER", name="transactioncategory"),
            nullable=False,
        ),
        sa.Column("split_group_id", sa.Uuid(), nullable=True),
        sa.Column("transfer_group_id", sa.Uuid(), nullable=True),
        sa.Column("reccuring_group_id", sa.Uuid(), nullable=True),
        sa.Column("household_id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.Column("category_id", sa.Uuid(), nullable=False),
        sa.Column("currency_id", sa.Uuid(), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
        ),
        sa.ForeignKeyConstraint(
            ["currency_id"],
            ["currency.id"],
        ),
        sa.ForeignKeyConstraint(["household_id"], ["household.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )

    now = datetime.now()

    currency_data = [
        {
            "id": uuid.UUID("11111111-1111-1111-1111-111111111111"),
            "name": "US Dollar",
            "symbol": "$",
            "code": "USD",
            "rate": 1.0,
        },
        {
            "id": uuid.UUID("22222222-2222-2222-2222-222222222222"),
            "name": "Euro",
            "symbol": "€",
            "code": "EUR",
            "rate": 1.1,
        },
        {
            "id": uuid.UUID("33333333-3333-3333-3333-333333333333"),
            "name": "British Pound",
            "symbol": "£",
            "code": "GBP",
            "rate": 1.3,
        },
        {
            "id": uuid.UUID("44444444-4444-4444-4444-444444444444"),
            "name": "Swiss Franc",
            "symbol": "CHF",
            "code": "CHF",
            "rate": 1.2,
        },
        {
            "id": uuid.UUID("55555555-5555-5555-5555-555555555555"),
            "name": "Japanese Yen",
            "symbol": "¥",
            "code": "JPY",
            "rate": 0.007,
        },
    ]

    op.bulk_insert(
        sa.table(
            "currency",
            sa.column("id", sa.Uuid()),
            sa.column("name", sa.String),
            sa.column("symbol", sa.String),
            sa.column("code", sa.String),
            sa.column("rate", sa.Float),
            sa.column("created_at", sa.DateTime),
            sa.column("updated_at", sa.DateTime),
        ),
        [
            {
                **currency,
                "created_at": now,
                "updated_at": now,
            }
            for currency in currency_data
        ],
    )

    categories = [
        # INCOME
        {
            "id": uuid.UUID("66666666-1111-1111-1111-111111111111"),
            "name": "Salary",
            "description": "Monthly salary",
            "category_type": "INCOME",
            "parent_id": None,
        },
        {
            "id": uuid.UUID("66666666-2222-1111-1111-111111111111"),
            "name": "Freelance",
            "description": "Freelance gigs",
            "category_type": "INCOME",
            "parent_id": None,
        },
        {
            "id": uuid.UUID("66666666-3333-1111-1111-111111111111"),
            "name": "Investments",
            "description": "Dividends, capital gains",
            "category_type": "INCOME",
            "parent_id": None,
        },
        # EXPENSE
        {
            "id": uuid.UUID("77777777-1111-1111-1111-111111111111"),
            "name": "Housing",
            "description": "Rent or mortgage",
            "category_type": "EXPENSE",
            "parent_id": None,
        },
        {
            "id": uuid.UUID("77777777-2222-1111-1111-111111111111"),
            "name": "Utilities",
            "description": "Living expenses",
            "category_type": "EXPENSE",
            "parent_id": uuid.UUID("77777777-1111-1111-1111-111111111111"),
        },
        {
            "id": uuid.UUID("77777777-3333-1111-1111-111111111111"),
            "name": "Groceries",
            "description": "Food and essentials",
            "category_type": "EXPENSE",
            "parent_id": None,
        },
        {
            "id": uuid.UUID("77777777-4444-1111-1111-111111111111"),
            "name": "Transportation",
            "description": "Car, gas, transit",
            "category_type": "EXPENSE",
            "parent_id": None,
        },
        {
            "id": uuid.UUID("77777777-5555-1111-1111-111111111111"),
            "name": "Entertainment",
            "description": "Streaming, movies",
            "category_type": "EXPENSE",
            "parent_id": None,
        },
        # Groceries Subcategories
        {
            "id": uuid.UUID("77777777-3333-2222-1111-111111111111"),
            "name": "Meat",
            "description": "Meat products",
            "category_type": "EXPENSE",
            "parent_id": uuid.UUID("77777777-3333-1111-1111-111111111111"),
        },
        {
            "id": uuid.UUID("77777777-3333-3333-1111-111111111111"),
            "name": "Dairy",
            "description": "Milk, cheese, yogurt",
            "category_type": "EXPENSE",
            "parent_id": uuid.UUID("77777777-3333-1111-1111-111111111111"),
        },
        {
            "id": uuid.UUID("77777777-3333-4444-1111-111111111111"),
            "name": "Vegetable",
            "description": "Fresh vegetables",
            "category_type": "EXPENSE",
            "parent_id": uuid.UUID("77777777-3333-1111-1111-111111111111"),
        },
        {
            "id": uuid.UUID("77777777-3333-5555-1111-111111111111"),
            "name": "Fruit",
            "description": "Fresh fruits",
            "category_type": "EXPENSE",
            "parent_id": uuid.UUID("77777777-3333-1111-1111-111111111111"),
        },
        # TRANSFER
        {
            "id": uuid.UUID("88888888-1111-1111-1111-111111111111"),
            "name": "Internal Transfer",
            "description": "Money moved between accounts",
            "category_type": "TRANSFER",
            "parent_id": None,
        },
    ]

    op.bulk_insert(
        sa.table(
            "category",
            sa.column("id", sa.Uuid()),
            sa.column("name", sa.String),
            sa.column("description", sa.String),
            sa.column("category_type", sa.Enum),
            sa.column("parent_id", sa.Uuid()),
            sa.column("household_id", sa.Uuid()),
            sa.column("created_at", sa.DateTime),
            sa.column("updated_at", sa.DateTime),
            sa.column("deleted_at", sa.DateTime),
        ),
        [
            {
                "id": category["id"],
                "name": category["name"],
                "description": category["description"],
                "category_type": category["category_type"],
                "parent_id": category["parent_id"],
                "household_id": None,
                "created_at": now,
                "updated_at": now,
                "deleted_at": None,
            }
            for category in categories
        ],
    )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("transaction")
    op.drop_table("budget_goal")
    op.drop_table("category")
    op.drop_index(op.f("ix_user_email"), table_name="user")
    op.drop_table("user")
    op.drop_table("household")
    op.drop_table("currency")
    # ### end Alembic commands ###
